@page "/"
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@using FrameGenerator;
@using SkiaSharp;
@using System;
@using System.Threading;
@using TtyRecDecoder;
@using DCSSTV2.Streams
@using System.IO;

    <button @onclick="StartCountdown">Play</button>
Welcome to your new app.
<img width="1602" height="768" alt="DCSSTVIMG" src="data:image/png;base64,@imreBase64Data">
<SurveyPrompt Title="How is Blazor working for you?" />


@code {
    Dictionary<string, string> a;
    private MainGenerator frameGenerator;
    string imreBase64Data;
    private const int TimeStepLengthMS = 5000;
    private readonly List<DateTime> PreviousFrames = new List<DateTime>();
    private DateTime PreviousFrame = DateTime.Now;
    private TimeSpan MaxDelayBetweenPackets = new TimeSpan(0, 0, 0, 0, 500);//millisecondss
    private int FrameStepCount;
    private int ConsoleSwitchLevel = 1;
    public TtyRecKeyframeDecoder ttyrecDecoder = null;
    public double PlaybackSpeed = 2, PausedSpeed = 0;
    public TimeSpan Seek;
    public List<string> files = new List<string>();
    public IEnumerable<Stream> streams;
    int i = 0;
    protected override async Task OnInitializedAsync()
    {

        var delay = TimeSpan.Zero;
        //byte[] byteData = System.IO.File.ReadAllBytes(env.WebRootPath + @"\Extra\play.png");
        //imreBase64Data = Convert.ToBase64String(byteData);
        frameGenerator = new MainGenerator(env.WebRootPath + @"\Extra");
        files.Add(env.WebRootPath + @"\neopolispart1.ttyrec");
        streams = files.TtyrecToStream();
        ttyrecDecoder = new TtyRecKeyframeDecoder(80, 24, streams, delay, MaxDelayBetweenPackets);
    }

    @functions {
        string ToBase64String(SKBitmap bmp)
        {
            var base64String = Convert.ToBase64String(bmp.Encode(SKEncodedImageFormat.Png, 80).ToArray());
            return base64String;
        }

        async Task StartCountdown()
        {
            while (true)
            {
                await Task.Delay(5);
                var now = DateTime.Now;

                PreviousFrames.Add(now);
                PreviousFrames.RemoveAll(f => f.AddSeconds(1) < now);

                var dt = Math.Max(0, Math.Min(0.1, (now - PreviousFrame).TotalSeconds));
                PreviousFrame = now;

                if (ttyrecDecoder != null)
                {

                    Seek += TimeSpan.FromSeconds(dt * PlaybackSpeed);

                    if (Seek > ttyrecDecoder.Length)
                    {
                        Seek = ttyrecDecoder.Length;
                    }
                    if (Seek < TimeSpan.Zero)
                    {
                        Seek = TimeSpan.Zero;
                    }

                    if (FrameStepCount != 0)
                    {
                        ttyrecDecoder.FrameStep(FrameStepCount); //step frame index by count
                        Seek = ttyrecDecoder.CurrentFrame.SinceStart;
                        FrameStepCount = 0;
                    }
                    else
                    {

                        ttyrecDecoder.Seek(Seek);

                    }

                    var frame = ttyrecDecoder.CurrentFrame.Data;

                    if (frame != null)
                    {

                        if (!frameGenerator.isGeneratingFrame)
                        {
                            frameGenerator.isGeneratingFrame = true;
#if true
                            ThreadPool.UnsafeQueueUserWorkItem(o =>
                            {
                                try
                                {
                                    imreBase64Data = ToBase64String(frameGenerator.GenerateImage(frame));
                                    frameGenerator.isGeneratingFrame = false;
                                    frame = null;
                                    InvokeAsync(StateHasChanged);
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine(ex.Message);
                                     //generator.GenerateImage(savedFrame);
                                     frameGenerator.isGeneratingFrame = false;
                                }
                            }, null);
#else //non threaded image generation (slow)
                            imreBase64Data = ToBase64String(frameGenerator.GenerateImage(frame));
                            frameGenerator.isGeneratingFrame = false;
#endif
                        }
                    }

                }
                else
                {
                    imreBase64Data = ToBase64String(frameGenerator.GenerateImage(null));

                }

            }
        }
    }

}



